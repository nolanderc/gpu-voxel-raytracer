#version 450

layout(local_size_x = 16, local_size_y = 16) in;

// Nearest-neighbour sampling
layout(binding = 0) uniform sampler near_sampler;

// RGB: color in previous frame
// A: blending to be used for this frame
layout(binding = 1) uniform texture2D old_color_blend;

// RGB: color in current frame
layout(rgba32f, binding = 2) uniform readonly image2D sampled_color;

// RGB: blended color for current frame
// A: blending to be used for the next frame
layout(rgba32f, binding = 3) uniform writeonly image2D new_color;

// XYZ: normal in previous frame
// W: depth in previous frame
layout(binding = 4) uniform texture2D old_normals_depths;

// XYZ: normal in current frame
// W: depth in current frame
layout(rgba32f, binding = 5) uniform readonly image2D new_normals_depths;

layout(binding = 6) uniform temporal_uniforms {
    float sample_blending;
    float maximum_blending;
    float blending_distance_cutoff;
};

layout(binding = 7) uniform camera_uniforms {
    vec4 camera_origin;
    vec4 camera_right;
    vec4 camera_up;
    vec4 camera_forward;
};

layout(binding = 8) uniform old_camera_uniforms {
    vec4 old_camera_origin;
    vec4 old_camera_right;
    vec4 old_camera_up;
    vec4 old_camera_forward;
};


void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    // Get the sampled color of the current pixel
    vec3 color = imageLoad(sampled_color, coord).rgb;

    // Get the position used to sample the pixel in the current frame
    vec4 new_normal_depth = imageLoad(new_normals_depths, coord);
    vec3 normal = new_normal_depth.xyz;
    float depth = new_normal_depth.w;

    // Get world coordinates of current pixel
    vec3 ray_dir = normalize(
            (coord.x) * camera_right.xyz 
            - (coord.y) * camera_up.xyz 
            + camera_forward.xyz
            );
    vec3 world_pos = camera_origin.xyz + depth * ray_dir;


    // By default, only use new color: no blending with old color
    vec4 old_color = vec4(0);
    float blending = 1;

    // Check if the current pixel hit some geometry
    if (depth >= 0) {
        // Convert world coordinates to pixel coordinates in previous frame
        mat4 old_screen_to_world = mat4(
                vec4(old_camera_right.xyz, 0),
                vec4(old_camera_up.xyz, 0),
                vec4(old_camera_forward.xyz, 0),
                vec4(old_camera_origin.xyz, 1)
            );

        mat4 old_world_to_screen = inverse(old_screen_to_world);

        vec4 old_screen = old_world_to_screen * vec4(world_pos, 1);
        old_screen.xy /= old_screen.z; // Perspective division

        // Get pixel coordinate in normalized coordinate space
        ivec2 size = textureSize(sampler2D(old_color_blend, near_sampler), 0);
        vec2 tex_coord = (old_screen.xy + vec2(0.5, -0.5)) * vec2(1.0 / (size.x), -1.0 / (size.y));

        // Sample from the old frame, if the pixel exists in it
        if (0 <= tex_coord.x && tex_coord.x <= 1 && 0 <= tex_coord.y && tex_coord.y <= 1) {
            // Get the position used to sample the pixel in the previous frame
            vec4 old_normal_depth = texture(sampler2D(old_normals_depths, near_sampler), tex_coord);

            // vec3 old_normal = old_normal_depth.xyz;
            float old_depth = old_normal_depth.w;

            vec3 old_ray_dir = normalize(
                    int(old_screen.x + 0.5) * old_camera_right.xyz 
                    + int(old_screen.y - 0.5) * old_camera_up.xyz 
                    + old_camera_forward.xyz
                );
            vec3 old_position = old_camera_origin.xyz + old_depth * old_ray_dir;

            // Direction from the surface to the camera.
            vec3 camera_dir = normalize(camera_origin.xyz - world_pos);

            float bias = max(0.1, dot(camera_dir, normal));
            float dist = distance(old_position, world_pos);

            // Only sample from pixels if the new pixel is close to the location in the previous frame
            bool same_position = bias * dist < blending_distance_cutoff * depth;
            if (same_position) {
                old_color = texture(sampler2D(old_color_blend, near_sampler), tex_coord); 
                blending = old_color.a;
            }
        }
    }

    vec3 blended_color = depth >= 0 ? mix(old_color.rgb, color, blending) : color;
    blended_color = clamp(blended_color, 0, 1);

    float next_blending = clamp((1 - sample_blending) * blending, 1 - maximum_blending, 1);

    imageStore(new_color, coord, vec4(blended_color, next_blending));
}

